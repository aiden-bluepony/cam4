/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
*/
import * as THREE from 'three'
import React, { useRef, useState, useEffect } from 'react'
import {useFrame} from '@react-three/fiber'
import { useGLTF, ContactShadows } from '@react-three/drei'
import {a as three} from '@react-spring/three'
import { a as web } from '@react-spring/web'

export default function Laptop({laptopOpen, hinge, ...props}) {
  const group = useRef()
  const { nodes, materials } = useGLTF('/Laptop2.glb')
  const [hovered, setHovered] = useState(false)
  useEffect(() => void (document.body.style.cursor = hovered ? 'pointer' : 'auto'), [hovered])
  useFrame((state) => {
    const t = state.clock.getElapsedTime()
    group.current.rotation.x = THREE.MathUtils.lerp(group.current.rotation.x, laptopOpen ? Math.cos(t / 2) / 4 + (Math.PI / 16) + 0.25 : Math.PI / 16, 0.1)
    group.current.rotation.y = THREE.MathUtils.lerp(group.current.rotation.y, laptopOpen ? Math.sin(t / 4) / 4 : 0, 0.1)
    group.current.rotation.z = THREE.MathUtils.lerp(group.current.rotation.z, laptopOpen ? Math.sin(t / 4) / 4 : 0, 0.1)
    group.current.position.y = THREE.MathUtils.lerp(group.current.position.y, laptopOpen ? (36 + Math.sin(t)) / 3 : 10, 0.1)
  })

  return (
    <group 
      ref={group} 
      {...props} 
      dispose={null}
      onPointerOver={(e) => (e.stopPropagation(), setHovered(true))}
      onPointerOut={(e) => setHovered(false)}
    >
      <three.group rotation-x={hinge} position={[0, -0.04, 0.41]} rotation={[0.01, 0, 0]}>
        <group position={[0, 2.96, -0.13]} rotation={[Math.PI / 2, 0, 0]}>
          <mesh geometry={nodes.Cube008.geometry} material={nodes.Cube008.material} />
          <mesh geometry={nodes.Cube008_1.geometry} material={materials['matte.001']}  />
          <mesh geometry={nodes.Cube008_2.geometry} material={materials['screen.001']}  />
        </group>
      </three.group>
      <group position={[0, -0.1, 3.39]}>
        <mesh geometry={nodes.Cube002.geometry} material={nodes.Cube002.material} />
        <mesh geometry={nodes.Cube002_1.geometry} material={materials.trackpad} />
      </group>
      <mesh geometry={nodes.keyboard.geometry} material={materials.keys} position={[1.79, 0, 3.45]}/>
      <mesh geometry={nodes.touchbar.geometry} material={materials.touchbar} position={[0, -0.03, 1.2]} />
    </group>
  )
}

useGLTF.preload('/Laptop2.glb')
