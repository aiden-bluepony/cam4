/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
*/
import * as THREE from 'three'
import {useFrame} from '@react-three/fiber'
import React, { useRef, useState, useEffect } from 'react'
import { useGLTF } from '@react-three/drei'

export default function Phone({on, ...props}) {
  const group = useRef()
  const { nodes, materials } = useGLTF('/Phone2.glb')

  const [hovered, setHovered] = useState(false)
  useEffect(() => void (document.body.style.cursor = hovered ? 'pointer' : 'auto'), [hovered])
  useFrame((state) => {
    const t = state.clock.getElapsedTime()
    group.current.rotation.x = THREE.MathUtils.lerp(group.current.rotation.x, on ? Math.cos(t / 2) / 4 + (-Math.PI / 16) + 0.25 : -Math.PI / 16, 0.1)
    group.current.rotation.y = THREE.MathUtils.lerp(group.current.rotation.y, on ? Math.sin(t / 4) / 4 : 0, 0.1)
    group.current.rotation.z = THREE.MathUtils.lerp(group.current.rotation.z, on ? Math.sin(t / 4) / 4 : 0, 0.1)
    group.current.position.y = THREE.MathUtils.lerp(group.current.position.y, on ? (Math.sin(t)) / 3 : 0, 0.1)
  })
  return (
    <group 
      ref={group} 
      {...props} 
      dispose={null}
      onPointerOver={(e) => (e.stopPropagation(), setHovered(true))}
      onPointerOut={(e) => setHovered(false)}
    >
      <mesh
        geometry={nodes.phoneBase.geometry}
        material={materials.darkAluminum}
        position={[0, -8.51, 4.98]}
        rotation={[0, -Math.PI / 2, 0]}
      />
      <mesh
        geometry={nodes.BlackScreen.geometry}
        material={materials.blackScreen}
        position={[0, -8.51, 4.99]}
        rotation={[0, -Math.PI / 2, 0]}
      />
      {on ? <mesh
        geometry={nodes.onScreen.geometry}
        material={materials.onScreen}
        position={[0, -8.51, 4.99]}
        rotation={[0, -Math.PI / 2, 0]}
      /> : null}
    </group>
  )
}

useGLTF.preload('/Phone2.glb')
